const express = require('express');
const line = require('@line/bot-sdk');
const ngrok = require('ngrok');  // ‡πÉ‡∏ä‡πâ ngrok ‡∏ó‡∏µ‡πà‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏à‡∏≤‡∏Å npm

// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏≠‡∏õ Express
const app = express();
app.use(express.json());

// LINE Channel Credentials
const CHANNEL_ACCESS_TOKEN = 'VDP6BNxp4IbJjVLe3MY73lghZwvqKeisykkmCxPLhhUV5xS5QFwt2fkIEWT6lvCOqX4P8Gusw4C+lrJrJEdMrrdYBQ3YJAQSm+hPyKVdiC97X9t7h9fOOhoyAHUbdhJYbaJnMsjyosvbxtQPFmmnTAdB04t89/1O/w1cDnyilFU=';
const CHANNEL_SECRET = 'b16b91dca7e1899f0f0945cad9bd8cae';
const GROUP_ID = 'Cc4b0c3a420fc92265e01e1236d666969'; // ‡πÑ‡∏•‡∏ô‡πå‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢

// ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ client ‡∏Ç‡∏≠‡∏á LINE
const config = {
  channelAccessToken: CHANNEL_ACCESS_TOKEN,
  channelSecret: CHANNEL_SECRET,
};

const client = new line.Client(config);

// ‡πÄ‡∏Å‡πá‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (user states)
const userStates = {};

// ‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô
const playerMap = {
  P1: '‡∏û‡∏µ‡πà‡∏≠‡∏∏‡πä',
  P2: '‡∏û‡∏µ‡πà‡∏≠‡∏≠‡∏°',
  P3: '‡∏û‡∏µ‡πà‡∏Ñ‡∏¥‡∏á',
  P4: '‡πÄ‡∏à‡∏ô',
  P5: '‡πÄ‡∏ó‡∏û‡πÅ‡∏´‡πà‡∏á‡πÅ‡∏ö‡∏î‡∏Å‡∏§‡∏©',
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå
function verifySignature(req, res, next) {
  const signature = req.headers['x-line-signature'];
  const body = JSON.stringify(req.body);
  
  const hash = require('crypto')
    .createHmac('sha256', CHANNEL_SECRET)
    .update(body)
    .digest('base64');

  if (signature !== hash) {
    return res.status(400).send('Signature mismatch');
  }
  next();
}

// ‡πÉ‡∏ä‡πâ middleware ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå
app.post('/webhook', verifySignature, line.middleware(config), (req, res) => {
  Promise.all(req.body.events.map(handleEvent))
    .then(() => res.status(200).end())
    .catch((err) => {
      console.error(err);
      res.status(500).end();
    });
});

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Event ‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏à‡∏≤‡∏Å LINE
async function handleEvent(event) {
  console.log('üì• ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö Event:', event);

  if (event.type !== 'message' || event.message.type !== 'text') return;

  // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° "‡∏ô‡πâ‡∏≠‡∏á‡πÅ‡∏ö‡∏î‡∏ï‡∏µ‡πâ‡∏™‡∏£‡∏∏‡∏õ‡∏Ñ‡πà‡∏≤‡∏ï‡∏µ‡πÅ‡∏ö‡∏î‡πÉ‡∏´‡πâ‡∏´‡∏ô‡πà‡∏≠‡∏¢‡∏à‡πâ‡∏≤"
  if (event.message.text === '‡∏ô‡πâ‡∏≠‡∏á‡πÅ‡∏ö‡∏î‡∏ï‡∏µ‡πâ‡∏™‡∏£‡∏∏‡∏õ‡∏Ñ‡πà‡∏≤‡∏ï‡∏µ‡πÅ‡∏ö‡∏î‡πÉ‡∏´‡πâ‡∏´‡∏ô‡πà‡∏≠‡∏¢‡∏à‡πâ‡∏≤') {
    userStates[event.source.userId] = { step: 'A1', data: {} };
    return client.replyMessage(event.replyToken, {
      type: 'text',
      text: `‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏Ñ‡πà‡∏≤‡∏ó‡πà‡∏≤‡∏ô‡πÄ‡∏ó‡∏û‡πÅ‡∏ö‡∏î‡∏Å‡∏§‡∏© ‡∏ô‡πâ‡∏≠‡∏á‡πÅ‡∏ö‡∏î‡∏ï‡∏µ‡πâ‡∏à‡∏∞‡∏™‡∏£‡∏∏‡∏õ‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡πÉ‡∏´‡πâ‡∏ô‡∏∞‡∏Ñ‡∏∞\n` +
            `‡πÅ‡∏ï‡πà‡∏Å‡πà‡∏≠‡∏ô‡∏≠‡∏∑‡πà‡∏ô ‡∏£‡∏ö‡∏Å‡∏ß‡∏ô‡∏ó‡πà‡∏≤‡∏ô‡πÄ‡∏ó‡∏û‡πÅ‡∏ö‡∏î‡∏Å‡∏§‡∏© ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏ô‡πâ‡∏≠‡∏á‡πÅ‡∏ö‡∏î‡∏ï‡∏µ‡πâ‡∏´‡∏ô‡πà‡∏≠‡∏¢‡∏ô‡∏∞‡∏Ñ‡∏∞\n\n` +
            `A1=‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏µ‡πÅ‡∏ö‡∏î‡∏Ñ‡πà‡∏∞`,
    });
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
  const state = userStates[event.source.userId];
  if (state) {
    const { step, data } = state;

    if (event.message.text.startsWith('A1=')) {
      data.A1 = event.message.text.split('=')[1];
      state.step = 'A2';
      return client.replyMessage(event.replyToken, {
        type: 'text',
        text: `A2=‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏•‡πà‡∏ô‡πÅ‡∏ö‡∏î‡∏Ñ‡πà‡∏∞`,
      });
    }

    if (event.message.text.startsWith('A2=')) {
      data.A2 = parseInt(event.message.text.split('=')[1]);
      state.step = 'A3';
      return client.replyMessage(event.replyToken, {
        type: 'text',
        text: `A3=‡∏Ñ‡πà‡∏≤‡∏à‡∏≠‡∏á‡∏Ñ‡∏≠‡∏ï‡∏£‡∏≠‡∏ö‡∏ô‡∏µ‡πâ‡πÄ‡∏ó‡πà‡∏≤‡πÑ‡∏£‡∏Ñ‡∏∞`,
      });
    }

    if (event.message.text.startsWith('A3=')) {
      data.A3 = parseInt(event.message.text.split('=')[1]);
      state.step = 'A4';
      return client.replyMessage(event.replyToken, {
        type: 'text',
        text: `A4=‡πÉ‡∏ä‡πâ‡∏•‡∏π‡∏Å‡πÅ‡∏ö‡∏î‡πÑ‡∏õ‡∏Å‡∏µ‡πà‡∏•‡∏π‡∏Å‡∏Ñ‡∏∞`,
      });
    }

    if (event.message.text.startsWith('A4=')) {
      data.A4 = parseInt(event.message.text.split('=')[1]);
      state.step = 'A5';
      return client.replyMessage(event.replyToken, {
        type: 'text',
        text: `A5=‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡πÉ‡∏ô‡∏£‡∏≠‡∏ö‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡πÉ‡∏Ñ‡∏£‡∏ö‡πâ‡∏≤‡∏á‡∏Ñ‡∏∞\n` +
              `P1=‡∏û‡∏µ‡πà‡∏≠‡∏∏‡πä P2=‡∏û‡∏µ‡πà‡∏≠‡∏≠‡∏° P3=‡∏û‡∏µ‡πà‡∏Ñ‡∏¥‡∏á P4=‡πÄ‡∏à‡∏ô P5=‡πÄ‡∏ó‡∏û‡πÅ‡∏´‡πà‡∏á‡πÅ‡∏ö‡∏î‡∏Å‡∏§‡∏©\n\n` +
              `‡πÄ‡∏ä‡πà‡∏ô A5=P1,P2,P3`,
      });
    }

    if (event.message.text.startsWith('A5=')) {
      const players = event.message.text.split('=')[1].split(',').map(p => p.trim());
      data.A5 = players;

      const courtFee = data.A2 * 180;
      const bookingFee = data.A3;
      const shuttleFee = data.A4 * 85;
      const total = courtFee + bookingFee + shuttleFee;
      const perPerson = Math.round(total / players.length);

      let playerLines = players.map(p => {
        const name = playerMap[p] || p;
        return `${name} ‡∏à‡πà‡∏≤‡∏¢ ${perPerson} ‡∏ö‡∏≤‡∏ó`;
      }).join('\n');

      const summary = `‡∏ß‡πâ‡∏≤‡∏ß‡∏ß!! ‡∏™‡∏∏‡∏î‡∏¢‡∏≠‡∏î‡πÄ‡∏•‡∏¢‡∏Ñ‡πà‡∏∞ ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏°‡∏≤‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢‡∏ô‡∏∞‡∏Ñ‡∏∞\n` +
                      `‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏µ‡πÅ‡∏ö‡∏î‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ô‡∏µ‡πâ ${total} ‡∏ö‡∏≤‡∏ó‡∏Ñ‡πà‡∏∞\n` +
                      `${playerLines}\n\n‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏û‡∏¢‡πå 0826721217 ‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏Ñ‡πà‡∏≤‡∏≤‡∏≤`;

      delete userStates[event.source.userId];

      // ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô LINE
      return client.replyMessage(event.replyToken, {
        type: 'text',
        text: summary,
      });
    }

    return client.replyMessage(event.replyToken, {
      type: 'text',
      text: `‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡πà‡∏∞ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏ô‡πâ‡∏≠‡∏á‡πÅ‡∏ö‡∏î‡∏ï‡∏µ‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à ‡πÄ‡∏ä‡πà‡∏ô A2=2`,
    });
  }
}

// ‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á GET ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÅ‡∏≠‡∏õ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
app.get('/', (req, res) => {
  res.send('‡∏ô‡πâ‡∏≠‡∏á‡πÅ‡∏ö‡∏î‡∏ï‡∏µ‡πâ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤ üí™üè∏');
});

// ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå
const port = process.env.PORT || 3000;
app.listen(port, () => {
  console.log(`Server running at http://localhost:${port}`);
});

// ‡πÉ‡∏ä‡πâ Ngrok ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î URL ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô HTTPS
(async function() {
  try {
    const url = await ngrok.connect(port); // ‡πÄ‡∏õ‡∏¥‡∏î Ngrok ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏û‡∏≠‡∏£‡πå‡∏ï 3000
    console.log(`Public URL: ${url}`);
  } catch (err) {
    console.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Ngrok:", err);
  }
})();
